name: PR Review Commenter

on:
  pull_request:
    types: [opened, synchronize, reopened]  # 当PR打开、更新或重新打开时触发

jobs:
  review-comment:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout repository
        uses: actions/checkout@v3

      # Step 2: Install necessary dependencies
      - name: Install jq and GitHub CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh curl

      # Step 3: Fetch modified files from the PR
      - name: Fetch modified files for the PR
        id: fetch-pr-files
        run: |
          echo "Fetching modified files for the PR..."
          PR_FILES=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" \
            | jq -r '.[].filename' | tr '\n' ' ')

          echo "Modified files: $PR_FILES"
          echo "modified_files=$PR_FILES" >> $GITHUB_ENV

      # Step 4: Read and parse MAINTAINER.json
      - name: Read MAINTAINER.json
        id: read-maintenancer-json
        run: |
          echo "Reading MAINTAINER.json"
          if [[ -f "MAINTAINER.json" ]]; then
            echo "Successfully read MAINTAINER.json."
            cat MAINTAINER.json
            maintainers=$(cat MAINTAINER.json)
            echo "maintainers=$maintainers" >> $GITHUB_ENV
          else
            echo "MAINTAINER.json not found"
            exit 1
          fi

      # Step 5: Determine reviewers based on modified files
      - name: Determine reviewers
        id: determine-reviewers
        run: |
          echo "Determining reviewers based on modified files..."
          MODIFIED_FILES="${{ env.modified_files }}"
          MAINTAINERS="${{ env.maintainers }}"
          
          # Initialize reviewer list
          declare -A reviewer_map
          
          for file in $MODIFIED_FILES; do
            echo "Checking file: $file"
            for tag_info in $(echo $MAINTAINERS | jq -r '.[] | @base64'); do
              _jq() {
                echo ${tag_info} | base64 --decode | jq -r ${1}
              }
              
              # Extract data from MAINTAINER.json
              tag=$(_jq '.tag')
              path=$(_jq '.path')
              owners=$(_jq '.owner')
              
              # Check if file is part of this tag's path
              if [[ "$file" == $path* ]]; then
                echo "File $file matches tag $tag"
                
                # Add reviewers to the map for this tag
                IFS=', ' read -r -a owners_array <<< "$owners"
                for owner in "${owners_array[@]}"; do
                  reviewer_map[$tag]+="@$(echo $owner | cut -d'(' -f1)"
                done
              fi
            done
          done

          # Prepare final reviewer output
          reviewers=""
          for tag in "${!reviewer_map[@]}"; do
            reviewers+="${reviewer_map[$tag]} "
          done

          echo "reviewers=$reviewers" >> $GITHUB_ENV

      # Step 6: Update or create CI review comment
      - name: Create or update CI comment
        run: |
          TIMESTAMP=$(date "+%Y-%m-%d %H:%M:%S")
          COMMENT_BODY="Timestamp: $TIMESTAMP\n\nReviewer: ${{ env.reviewers }}\n\n"
          
          # Iterate over maintainers to build comment content for each tag
          for tag_info in $(echo ${{ env.maintainers }} | jq -r '.[] | @base64'); do
            _jq() {
              echo ${tag_info} | base64 --decode | jq -r ${1}
            }

            tag=$(_jq '.tag')
            owners=$(_jq '.owner')

            # Check if the current tag has any reviewer
            if [[ "$reviewers" == *"@$tag"* ]]; then
              COMMENT_BODY+="Tag: $tag\nPlease take a review of this tag\n\n"
            fi
          done

          # Fetch existing comments and update
          PR_NUMBER=${{ github.event.pull_request.number }}
          COMMENTS=$(gh pr view $PR_NUMBER --json comments -q ".comments")
          
          # Check if there's an existing CI bot comment
          EXISTING_COMMENT=$(echo "$COMMENTS" | jq -r '.[] | select(.user.login=="github-actions[bot]") | .id' || true)

          if [[ -n "$EXISTING_COMMENT" ]]; then
            echo "Updating existing comment."
            gh pr comment $PR_NUMBER --body "$COMMENT_BODY" --comment-id $EXISTING_COMMENT
          else
            echo "Creating new comment."
            gh pr comment $PR_NUMBER --body "$COMMENT_BODY"
          fi
