name: Auto Review Assistant

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
  issue_comment:
    types: [created]

jobs:
  assign-reviewers:
    concurrency:
      group: assign-reviewers-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    runs-on: ubuntu-22.04
    if: github.repository_owner == 'Nedki-L'
    permissions:
      issues: write
      pull-requests: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get changed files
        id: changed_files
        run: |
          # 处理分页获取所有变更文件
          page=1
          echo "" > changed_files.txt
          while true; do
            response=$(curl -s \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files?page=$page&per_page=100")
            
            files=$(echo "$response" | jq -r '.[].filename')
            if [ -z "$files" ]; then
              break
            fi
            echo "$files" | grep -v '^MAINTAINERS$' >> changed_files.txt
            page=$((page+1))
          done

      - name: Parse MAINTAINERS file
        id: parse_maintainer
        run: |
          awk '
            BEGIN { FS="[ \t]*:[ \t]*" }
            /^tag:/ { tag=$2 }
            /^path:/ { path=$2 }
            /^owners:/ {
              split($0, parts, /[()]/)
              github_ids = ""
              for (i=2; i<=length(parts); i+=2) {
                github_ids = github_ids "@" parts[i] " "
              }
              print tag "|" path "|" github_ids
            }
          ' MAINTAINERS > tag_data.csv
          echo "Generated tag data:"
          cat tag_data.csv

      - name: Generate reviewers list
        id: generate_reviewers
        run: |
          rm -f triggered_reviewers.txt
          while IFS='|' read -r tag path reviewers; do
            if grep -qE "^$path(/|$)" changed_files.txt; then
              echo "$reviewers" | tr ' ' '\n' >> triggered_reviewers.txt
            fi
          done < tag_data.csv
          awk 'NF && !seen[$0]++' triggered_reviewers.txt > unique_reviewers.txt

      - name: Get approval status
        id: get_approval
        run: |
          current_time=$(date -u +"%Y-%m-%d %H:%M UTC")
          reviewers=$(cat unique_reviewers.txt | tr '\n' '|')

          comments=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments")

          # 生成审批数据
          echo '#!/bin/bash' > approval_data.sh
          echo 'declare -A approvals=()' >> approval_data.sh
          
          jq -r --arg reviewers "$reviewers" '
            .[] | 
            select(.user.login != "github-actions[bot]") |
            select(.body | test("^\\s*LGTM\\s*$"; "i")) |
            .user.login as $user |
            "@\($user)" as $mention |
            select($mention | inside($reviewers)) |
            "approvals[\"\($mention)\"]=\"\(.created_at)\"" 
          ' <<< "$comments" >> approval_data.sh

          chmod +x approval_data.sh
          source ./approval_data.sh

          # 生成状态报告
          {
            echo "---"
            echo "### 📊 Current Review Status (Last Updated: $current_time)"
            while read -r reviewer; do
              if [[ -n "${approvals[$reviewer]}" ]]; then
                timestamp=$(date -d "${approvals[$reviewer]}" -u +"%Y-%m-%d %H:%M UTC")
                echo "- ✅ **${reviewer#@}** Reviewed On $timestamp"
              else
                echo "- ⌛ **${reviewer#@}** Pending Review"
              fi
            done < unique_reviewers.txt
          } > review_status.md

      - name: Generate review data
        id: generate_review
        run: |
          # 获取历史@记录
          mentioned_users=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments" | \
            jq -r '.[] | select(.user.login == "github-actions[bot]") | .body' | \
            grep -E '^\*\*Reviewers:\*\*' | \
            grep -oE '@\w+' | sort -u)
          
          echo "$mentioned_users" > mentioned_users.txt

          # 生成智能评论内容
          {
            echo "## 📌 Code Review Assignment"
            echo ""

            while IFS='|' read -r tag path reviewers; do
              if grep -qE "^$path(/|$)" changed_files.txt; then
                echo "### 🏷️ Tag: $tag"
                echo "**Path:** \`$path\`  "
                echo -n "**Reviewers:** "

                # 处理每个审核者的@逻辑
                processed_reviewers=()
                for reviewer in $reviewers; do
                  if grep -q "^$reviewer$" mentioned_users.txt; then
                    processed_reviewers+=("${reviewer#@}")
                  else
                    processed_reviewers+=("$reviewer")
                  fi
                done

                # 格式化输出
                echo "$(IFS=', '; echo "${processed_reviewers[*]}")  "

                # 显示变更文件
                echo "<details>"
                echo "<summary><b>Changed Files</b> (Click to expand)</summary>"
                echo ""
                grep -E "^$path(/|$)" changed_files.txt | sed 's/^/- /'
                echo ""
                echo "</details>"
                echo ""
              fi
            done < tag_data.csv

            cat review_status.md

            echo "---"
            echo "### 📝 Review Instructions"
            echo ""
            echo "1. **维护者可以通过单击此处来刷新审查状态:** [🔄 刷新状态](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/rerun)"
            echo "   **Maintainers can refresh the review status by clicking here:** [🔄 Refresh Status](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/rerun)"
            echo ""
            echo "2. **确认审核通过后评论 \`LGTM/lgtm\`**"
            echo "   **Comment \`LGTM/lgtm\` after confirming approval**"
            echo ""
            echo "3. **PR合并前需至少一位维护者确认**"
            echo "   **PR must be confirmed by at least one maintainer before merging**"
            echo ""
            echo "> ℹ️ **刷新CI状态操作需要具备仓库写入权限。**"
            echo "> ℹ️ **Refresh CI status operation requires repository Write permission.**"
          } > review_data.md

      - name: Post/Update comment
        id: post_comment
        run: |
          # 获取现有评论
          existing_comments=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments" | \
            jq -r '.[] | select(.user.login == "github-actions[bot]") | {id: .id, body: .body} | @base64')

          # 生成新评论内容
          new_body=$(cat review_data.md)
          update_needed="false"
          comment_id=""

          # 比较评论内容差异
          while IFS= read -r comment; do
            if [[ -n "$comment" ]]; then
              decoded=$(echo "$comment" | base64 -d)
              current_id=$(echo "$decoded" | jq -r .id)
              current_body=$(echo "$decoded" | jq -r .body)

              if [[ "$current_body" != "$new_body" ]]; then
                update_needed="true"
                comment_id="$current_id"
              else
                echo "内容未变化，无需更新评论。"
                exit 0
              fi
            fi
          done <<< "$existing_comments"

          # 执行评论更新
          if [[ "$update_needed" == "true" || -z "$existing_comments" ]]; then
            if [[ -n "$comment_id" ]]; then
              echo "更新现有评论 $comment_id"
              curl -s -X PATCH \
                -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                -d "$(jq -n --arg body "$new_body" '{body: $body}')" \
                "https://api.github.com/repos/${{ github.repository }}/issues/comments/$comment_id"
            else
              echo "新建评论"
              curl -s -X POST \
                -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                -d "$(jq -n --arg body "$new_body" '{body: $body}')" \
                "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
            fi
          fi
