name: Auto Reviewers Assignment

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  assign-reviewers:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get changed files
        id: changed_files_step  # 修正唯一ID
        run: |
          changed_files=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" | \
            jq -r '.[].filename')
          
          echo "$changed_files" | grep -v '^MAINTAINER$' > changed_files.txt
          echo "🔄 Changed files:"
          cat changed_files.txt | sed 's/^/  - /'

      - name: Parse MAINTAINER file
        id: parse_maintainer_step  # 修正唯一ID
        run: |
          awk '
            /^tag:/ { tag=$2 }
            /^path:/ { path=$2 }
            /^owners:/ {
              split($0, parts, /[()]/)
              github_ids = ""
              for (i=2; i<=length(parts); i+=2) {
                github_ids = github_ids "@" parts[i] " "
              }
              print tag "|" path "|" github_ids
            }
          ' MAINTAINER > tag_data.csv
          echo "✅ Parsed data:"
          column -t -s "|" tag_data.csv | sed 's/^/  /'

      - name: Generate review data
        id: generate_review_step
        run: |
          changed_files=$(cat changed_files.txt)
          rm -f review_data.md
          
          # 初始化评论头部（无空行）
          echo "## 📌 Code Ownership Review Request" > review_data.md
          
          while IFS='|' read -r tag path reviewers; do
            matched_files=$(grep -E "^$path(/|$)" changed_files.txt || true)
            if [[ -n "$matched_files" ]]; then
              # 生成带间距的内容块
              {
                echo ""
                echo "### 🏷️ Tag: $tag"
                echo "**Path:** \`$path\`  "
                echo "**Reviewers:** $reviewers  "
                echo "<details>"
                echo "<summary><b>Changed Files</b> (Click to expand)</summary>"
                echo ""
                echo "$matched_files" | sed 's/^/- /'
                echo ""
                echo "</details>"
              } >> review_data.md
            fi
          done < tag_data.csv
          
          # 添加审核状态跟踪模块
          echo "" >> review_data.md
          echo "---" >> review_data.md
          echo "### 📝 Review Progress" >> review_data.md
          echo "Please click the checkbox when review is completed:" >> review_data.md
          echo "- [ ] @kurisaW" >> review_data.md
          echo "- [ ] @Nedki-L" >> review_data.md
          echo "- [ ] @KurisaW-Collaborative" >> review_data.md
          echo "*Note: Checkboxes are interactive in GitHub comments.*" >> review_data.md
          
          # 验证文件内容
          echo "Generated review_data.md:"
          cat review_data.md

      - name: Delete old comments
        if: env.REVIEW_DATA_EXISTS == 'true'
        run: |
          echo "::group::Deleting previous comments..."
          comment_ids=$(
            curl -s \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments" |
            jq -r '.[] | select(.user.login == "github-actions[bot]") | .id'
          )
          for id in $comment_ids; do
            echo "Deleting comment $id"
            curl -s -X DELETE \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/comments/$id"
          done
          echo "::endgroup::"

      - name: Post structured comment
        if: env.REVIEW_DATA_EXISTS == 'true'
        run: |
          # 生成动态审核列表
          reviewers_list=$(awk -F'|' '{print $3}' tag_data.csv | tr ' ' '\n' | sort -u | xargs)
          
          # 构建评论内容
          comment_header="## 📌 Code Ownership Review Request\n\n"
          comment_body=$(cat review_data.md)
          progress_section="\n\n---\n### 📝 Review Progress\n"
          progress_section+="Click checkboxes to mark completion (需手动勾选):\n"
          
          for reviewer in $reviewers_list; do
            progress_section+="- [ ] ${reviewer}\n"
          done
          
          full_comment="${comment_header}${comment_body}${progress_section}"
          
          # 使用 jq 安全生成 JSON
          comment_json=$(jq -n --arg body "$full_comment" '{body: $body}')
          
          # 发送请求
          response=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -X POST \
            -d "$comment_json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments")
          
          echo "✅ Comment posted with interactive checklist!"
