name: Auto Reviewer Based on MAINTAINER.json

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  auto-comment:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.x'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install requests

      - name: Get PR modified files
        id: pr_files
        run: |
          echo "Fetching modified files for the PR..."
          PR_FILES=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" \
          | jq -r '.[].filename')
          echo "Modified files: $PR_FILES"
          echo "::set-output name=files::$PR_FILES"

      - name: Create Python script to process MAINTAINER.json
        run: |
          echo """
          import json
          import os

          # MAINTAINER.json path
          maintainers_file = './MAINTAINER.json'

          # PR files from previous step
          pr_files = "${{ steps.pr_files.outputs.files }}".split(',')

          # Read MAINTAINER.json and match files
          with open(maintainers_file, 'r') as file:
              maintainers_data = json.load(file)

          # Function to find matching owners
          def find_owners_for_file(files, maintainers):
              owners = []
              for maintainer in maintainers:
                  if any(file.startswith(maintainer['path']) for file in files):
                      owners.extend(maintainer['owner'].split(','))
              return owners

          # Get matching owners based on modified files
          owners = find_owners_for_file(pr_files, maintainers_data)

          # Generate GitHub comment
          comment = ""
          for owner in owners:
              github_id = owner.split('(')[1].split(')')[0].strip()
              comment += f"@{github_id}\n"
              comment += f"Tag: {maintainer['tag']}\n"
              comment += f"Please take a review of this tag\n\n"

          # Output the comment
          print(f"Generated comment: {comment}")
          os.environ["COMMENT_BODY"] = comment
          """ > process_comment.py

      - name: Run Python script to generate comment
        run: python process_comment.py

      - name: Post comment to PR
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}
          COMMENT_BODY="${{ env.COMMENT_BODY }}"

          curl -X POST -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
          -H "Content-Type: application/json" \
          -d "{\"body\": \"$COMMENT_BODY\"}" \
          "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/comments"
