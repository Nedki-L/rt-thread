name: PR Review Automation

on:
  pull_request:
    paths:
      - '**/*'
    types:
      - opened
      - synchronize
      - reopened

jobs:
  review-comment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq gh

      - name: Get modified files
        id: get-modified-files
        run: |
          echo "::set-output name=modified_files::$(git diff --name-only ${{ github.event.before }} ${{ github.sha }})"

      - name: Fetch MAINTAINER.json
        id: fetch-maintainer-json
        run: |
          if [[ -f "MAINTAINER.json" ]]; then
            MAINTAINER_JSON=$(cat MAINTAINER.json)
            echo "Successfully read MAINTAINER.json."
            echo "Contents of MAINTAINER.json:"
            echo "$MAINTAINER_JSON"
          else
            echo "Error: MAINTAINER.json not found."
            exit 1
          fi
          echo "::set-output name=maintainer-json::${MAINTAINER_JSON}"

      - name: Process PR and comment
        id: process-pr
        run: |
          # Initialize variables
          timestamp=$(date +'%Y-%m-%d %H:%M:%S')

          # Parse MAINTAINER.json
          maintainer_json="${{ steps.fetch-maintainer-json.outputs.maintainer-json }}"
          
          # Ensure MAINTAINER.json is valid JSON
          echo "$maintainer_json" | jq empty
          if [ $? -ne 0 ]; then
            echo "Error: Invalid MAINTAINER.json format."
            exit 1
          fi

          IFS=$'\n'
          declare -A tag_reviewers

          # Process each tag and its owners
          for line in $(echo "$maintainer_json" | jq -r '.[] | @base64'); do
            _jq() {
              echo ${line} | base64 --decode | jq -r ${1}
            }

            tag=$(_jq '.tag')
            path=$(_jq '.path')
            owners=$(_jq '.owner')

            # Check if the modified files match the path for the tag
            for file in ${{ steps.get-modified-files.outputs.modified_files }}; do
              if [[ "$file" == $path* ]]; then
                # Add tag and reviewers to the dictionary
                tag_reviewers["$tag"]+="$owners "
              fi
            done
          done

          # Prepare the final comment content
          COMMENT_BODY=""
          for tag in "${!tag_reviewers[@]}"; do
            # Deduplicate and sort reviewers
            reviewers=$(echo "${tag_reviewers[$tag]}" | tr ' ' '\n' | sort -u | tr '\n' ' ')

            COMMENT_BODY+="Timestamp: ${timestamp}\n"
            COMMENT_BODY+="Reviewer: ${reviewers}\n"
            COMMENT_BODY+="Tag: ${tag}\n"
            COMMENT_BODY+="Please take a review of this tag\n\n"
          done

          # Post or update the comment
          PR_NUMBER=${{ github.event.pull_request.number }}
          COMMENT_ID=$(gh pr view $PR_NUMBER --json comments -q ".comments[] | select(.user.login == \"github-actions[bot]\") | .id")

          if [ -z "$COMMENT_ID" ]; then
            gh pr comment $PR_NUMBER --body "$COMMENT_BODY"
          else
            gh pr edit $PR_NUMBER --comment-id $COMMENT_ID --body "$COMMENT_BODY"
          fi

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache
          key: ${{ runner.os }}-dependencies-${{ hashFiles('**/*.json') }}

      - name: Configure GitHub CLI with provided GITHUB_TOKEN
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | gh auth login --with-token
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
