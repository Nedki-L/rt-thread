name: Auto Reviewers Assignment

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  assign-reviewers:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get changed files
        id: changed_files
        run: |
          changed_files=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" | \
            jq -r '.[].filename')
          
          filtered_files=$(echo "$changed_files" | grep -v '^MAINTAINER$')
          echo "$filtered_files" > changed_files.txt
          echo "🔄 Changed files detected:"
          cat changed_files.txt | sed 's/^/  - /'

      - name: Parse MAINTAINER file
        id: parse_maintainer
        run: |
          echo "📖 Parsing MAINTAINER file..."
          maintainer_content=$(cat MAINTAINER)
          echo -e "tag|path|reviewers\n$(echo "$maintainer_content" | sed -n '/^tag:/{N;N;p}' | sed 'N;s/\n/|/g')" > tag_data.csv
          echo "✅ Parsed CSV data:"
          column -t -s "|" tag_data.csv | sed 's/^/  /'

      - name: Match tags and generate review list
        id: match_tags
        run: |
          changed_files=$(cat changed_files.txt)
          
          # 生成按标签分组的审阅者数据
          rm -f review_data.md
          while IFS='|' read -r tag path owners; do
            [[ "$tag" == "tag" ]] && continue  # 跳过标题行
            
            # 提取 GitHub ID（精确匹配括号内容）
            github_ids=$(echo "$owners" | sed -E 's/[^,(]*\(([^)]+)\)[^,]*/@\1/g' | tr ',' ' ' | xargs | tr ' ' '\n' | sort -u | tr '\n' ' ')
            
            # 检查文件路径匹配
            matched_files=$(grep -E "^$path(/|$)" changed_files.txt || true)
            if [[ -n "$matched_files" ]]; then
              echo "📌 **Tag: $tag**" >> review_data.md
              echo "📍 **Path**: \`$path\`" >> review_data.md
              echo "👥 **Reviewers**: $github_ids" >> review_data.md
              echo "📝 **Changed Files**:" >> review_data.md
              echo "$matched_files" | sed 's/^/  - /' >> review_data.md
              echo "" >> review_data.md
            fi
          done < tag_data.csv
          
          # 保存结果
          if [[ -f review_data.md ]]; then
            echo "REVIEW_DATA_EXISTS=true" >> $GITHUB_ENV
            echo "✅ Generated review data:"
            cat review_data.md
          else
            echo "REVIEW_DATA_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Delete old comments
        if: env.REVIEW_DATA_EXISTS == 'true'
        run: |
          echo "🧹 Cleaning up previous comments..."
          comments=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments")
          
          echo "$comments" | jq -r '.[] | select(.user.login == "github-actions[bot]") | .id' | while read -r comment_id; do
            echo "  🗑 Deleting comment $comment_id"
            curl -s -X DELETE \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/comments/$comment_id"
          done

      - name: Post structured comment
        if: env.REVIEW_DATA_EXISTS == 'true'
        run: |
          echo "📝 Generating professional review comment..."
          comment_header="## 📌 Code Owners Request\n\n**Detected modifications require review from the following experts:**\n\n"
          comment_body=$(cat review_data.md | sed 's/📌/###/g; s/📍/**Path**:/g; s/👥/**Reviewers**:/g; s/📝/**Changed Files**:/g')
          
          full_comment="${comment_header}${comment_body}"
          echo -e "✉️ Final comment content:\n${full_comment}" | sed 's/^/  /'
          
          # 使用 JSON 安全格式化
          comment_json=$(jq -n --arg body "$full_comment" '{body: $body}' | sed 's/\\n/\n/g')
          
          response=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -X POST \
            -d "$comment_json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments")
          
          if echo "$response" | grep -q '"message"'; then
            echo "❌ Failed to post comment:"
            echo "$response" | jq .
            exit 1
          else
            echo "✅ Comment posted successfully!"
          fi
