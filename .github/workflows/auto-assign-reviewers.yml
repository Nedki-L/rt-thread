name: Code Review Assistant

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
  issue_comment:
    types: [created]

jobs:
  assign-reviewers:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get changed files
        id: changed_files
        run: |
          changed_files=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" | \
            jq -r '.[].filename')
          
          echo "$changed_files" | grep -v '^MAINTAINER$' > changed_files.txt

      - name: Parse MAINTAINER file
        id: parse_maintainer
        run: |
          awk '
            /^tag:/ { tag=$2 }
            /^path:/ { path=$2 }
            /^owners:/ {
              split($0, parts, /[()]/)
              github_ids = ""
              for (i=2; i<=length(parts); i+=2) {
                github_ids = github_ids "@" parts[i] " "
              }
              print tag "|" path "|" github_ids
            }
          ' MAINTAINER > tag_data.csv

      - name: Generate reviewers list
        id: generate_reviewers
        run: |
          rm -f triggered_reviewers.txt
          while IFS='|' read -r tag path reviewers; do
            if grep -qE "^$path(/|$)" changed_files.txt; then
              echo "$reviewers" | tr ' ' '\n' >> triggered_reviewers.txt
            fi
          done < tag_data.csv
          awk 'NF && !seen[$0]++' triggered_reviewers.txt > unique_reviewers.txt

      - name: Get approval status
        id: get_approval
        run: |
          current_time=$(date -u +"%Y-%m-%d %H:%M UTC")
          reviewers=$(cat unique_reviewers.txt | tr '\n' '|')

          comments=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments")

          echo '#!/bin/bash' > approval_data.sh
          echo 'declare -A approvals=()' >> approval_data.sh
          
          jq -r --arg reviewers "$reviewers" '
            .[] | 
            select(.user.login != "github-actions[bot]") |
            select(.body | test("^\\s*LGTM\\s*$"; "i")) |
            .user.login as $user |
            "@\($user)" as $mention |
            select($mention | inside($reviewers)) |
            "approvals[\"\($mention)\"]=\"\(.created_at)\"" 
          ' <<< "$comments" >> approval_data.sh

          chmod +x approval_data.sh
          source ./approval_data.sh

          {
            echo "---"
            echo "### üìä Current Review Status (Last Updated: $current_time)"
            while read -r reviewer; do
              if [[ -n "${approvals[$reviewer]}" ]]; then
                timestamp=$(date -d "${approvals[$reviewer]}" -u +"%Y-%m-%d %H:%M UTC")
                echo "- ‚úÖ **$reviewer** Reviewed On $timestamp"
              else
                echo "- ‚åõ **$reviewer** Pending Review"
              fi
            done < unique_reviewers.txt
          } > review_status.md

      - name: Generate review data
        id: generate_review
        run: |
          current_time=$(date -u +"%Y-%m-%d %H:%M UTC")
          {
            echo "## üìå Code Review Assignment"
            echo ""

            while IFS='|' read -r tag path reviewers; do
              if grep -qE "^$path(/|$)" changed_files.txt; then
                echo "### üè∑Ô∏è Tag: $tag"
                echo "**Path:** \`$path\`  "
                echo "**Reviewers:** $reviewers  "
                echo "<details>"
                echo "<summary><b>Changed Files</b> (Click to expand)</summary>"
                echo ""
                grep -E "^$path(/|$)" changed_files.txt | sed 's/^/- /'
                echo ""
                echo "</details>"
                echo ""
              fi
            done < tag_data.csv

            cat review_status.md

            echo "---"
            echo "### üìù Review Instructions"
            echo ""
            echo "1. **Áª¥Êä§ËÄÖÂèØ‰ª•ÈÄöËøáÂçïÂáªÊ≠§Â§ÑÊù•Âà∑Êñ∞ÂÆ°Êü•Áä∂ÊÄÅ:** [üîÑ Âà∑Êñ∞Áä∂ÊÄÅ](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/rerun)"
            echo "   **Maintainers can refresh the review status by clicking here:** [üîÑ Refresh Status](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/rerun)"
            echo ""
            echo "2. **Á°ÆËÆ§ÂÆ°Ê†∏ÈÄöËøáÂêéËØÑËÆ∫ \`LGTM/lgtm\`**"
            echo "   **Comment \`LGTM/lgtm\` after confirming approval**"
            echo ""
            echo "3. **PRÂêàÂπ∂ÂâçÈúÄËá≥Â∞ë‰∏Ä‰ΩçÁª¥Êä§ËÄÖÁ°ÆËÆ§**"
            echo "   **PR must be confirmed by at least one maintainer before merging**"
            echo ""
            echo "> ‚ÑπÔ∏è **Âà∑Êñ∞CIÁä∂ÊÄÅÊìç‰ΩúÈúÄË¶ÅÂÖ∑Â§á‰ªìÂ∫ìÂÜôÂÖ•ÊùÉÈôê„ÄÇ**"
            echo "> ‚ÑπÔ∏è **Refresh CI status operation requires repository Write permission.**"
          } > review_data.md

      - name: Post/Update comment
        id: post_comment
        run: |
          existing_comment=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments" | \
            jq -r '.[] | select(.user.login == "github-actions[bot]") | {id: .id, body: .body} | @base64')
          
          if [[ -n "$existing_comment" ]]; then
            comment_id=$(echo "$existing_comment" | head -1 | base64 -d | jq -r .id)
            echo "Updating existing comment $comment_id"
            response=$(curl -s -X PATCH \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -d "$(jq -n --arg body "$(cat review_data.md)" '{body: $body}')" \
              "https://api.github.com/repos/${{ github.repository }}/issues/comments/$comment_id")
          else
            echo "Creating new comment"
            response=$(curl -s -X POST \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -d "$(jq -n --arg body "$(cat review_data.md)" '{body: $body}')" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments")
          fi
