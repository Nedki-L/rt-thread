#
# Copyright (c) 2006-2025, RT-Thread Development Team
#
# SPDX-License-Identifier: Apache-2.0
#
# Change Logs:
# Date           Author       Notes
# 2025-01-21     kurisaW      Initial version
#
# Script Function Description: Assign PR reviews based on the MAINTAINERS list.

name: Auto Review Assistant

on:
  pull_request:
    types: [opened, synchronize, reopened]
  workflow_dispatch:
  issue_comment:
    types: [created]

jobs:
  assign-reviewers:
    concurrency:
      group: assign-reviewers-${{ github.event.pull_request.number || github.ref }}
      cancel-in-progress: true
    runs-on: ubuntu-22.04
    if: github.repository_owner == 'Nedki-L'
    permissions:
      issues: write
      pull-requests: write
      contents: read
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache mention registry
        uses: actions/cache@v3
        id: mention-cache
        with:
          path: mentioned_users.txt
          key: pr-${{ github.event.pull_request.number }}-mentions
          restore-keys: |
            pr-${{ github.event.pull_request.number }}-mentions

      - name: Get changed files
        id: changed_files
        run: |
          page=1
          echo "" > changed_files.txt
          while true; do
            response=$(curl -s \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files?page=$page&per_page=100")
            
            files=$(echo "$response" | jq -r '.[].filename')
            if [ -z "$files" ]; then
              break
            fi
            echo "$files" | grep -v '^MAINTAINERS$' >> changed_files.txt
            page=$((page+1))
          done

      - name: Parse MAINTAINERS file
        id: parse_maintainer
        run: |
          awk '
            BEGIN { FS="[ \t]*:[ \t]*" }
            /^tag:/ { tag=$2 }
            /^path:/ { path=$2 }
            /^owners:/ {
              split($0, parts, /[()]/)
              github_ids = ""
              for (i=2; i<=length(parts); i+=2) {
                github_ids = github_ids "@" parts[i] " "
              }
              print tag "|" path "|" github_ids
            }
          ' MAINTAINERS > tag_data.csv

      - name: Generate reviewers list
        id: generate_reviewers
        run: |
          rm -f triggered_reviewers.txt
          while IFS='|' read -r tag path reviewers; do
            if grep -qE "^$path(/|$)" changed_files.txt; then
              echo "$reviewers" | tr ' ' '\n' >> triggered_reviewers.txt
            fi
          done < tag_data.csv
          awk 'NF && !seen[$0]++' triggered_reviewers.txt > unique_reviewers.txt

      - name: Get approval status
        id: get_approval
        run: |
          touch unique_reviewers.txt
          current_time=$(date -u +"%Y-%m-%d %H:%M UTC")
          reviewers=$(cat unique_reviewers.txt | tr '\n' '|' || true)

          comments=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments")

          echo '#!/bin/bash' > approval_data.sh
          echo 'declare -A approvals=()' >> approval_data.sh
          
          jq -r --arg reviewers "$reviewers" '
            .[] | 
            select(.user.login != "github-actions[bot]") |
            select(.body | test("^\\s*LGTM\\s*$"; "i")) |
            .user.login as $user |
            "@\($user)" as $mention |
            select($mention | inside($reviewers)) |
            "approvals[\"\($mention)\"]=\"\(.created_at)\"" 
          ' <<< "$comments" >> approval_data.sh

          chmod +x approval_data.sh
          source ./approval_data.sh

          {
            echo "---"
            echo "### 📊 Current Review Status (Last Updated: $current_time)"
            if [ -s "unique_reviewers.txt" ]; then
              while read -r reviewer; do
                if [[ -n "${approvals[$reviewer]}" ]]; then
                  timestamp=$(date -d "${approvals[$reviewer]}" -u +"%Y-%m-%d %H:%M UTC")
                  echo "- ✅ **${reviewer#@}** Reviewed On $timestamp"
                else
                  echo "- ⌛ **${reviewer#@}** Pending Review"
                fi
              done < unique_reviewers.txt
            else
              echo "- ⚠️ No reviewers assigned"
            fi
          } > review_status.md

      - name: Build mention registry
        id: mention_registry
        run: |
          touch mentioned_users.txt
          
          # 获取所有历史@记录（含分页）
          page=1
          while true; do
            response=$(curl -s \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments?page=$page&per_page=100")
            
            # 双重标准化处理
            mentions=$(echo "$response" | 
              jq -r '.[] | 
                select(.user.login == "github-actions[bot]") | 
                .body' | 
              grep -oE '@[a-zA-Z0-9_-]+' |
              awk '{print tolower($0)}')
            
            [ -z "$mentions" ] && break
            echo "$mentions" >> mentioned_users.txt
            page=$((page+1))
          done

          # 全局去重和排序
          awk '!seen[tolower($0)]++' mentioned_users.txt | sort -u > tmp && mv tmp mentioned_users.txt

      - name: Generate review data
        id: generate_review
        run: |
          declare -A new_mentions=()
          touch mentioned_users.txt
          
          # 加载全局记录
          awk '{print tolower($0)}' mentioned_users.txt | sort -u > global_mentions.txt
          
          {
            echo "## 📌 Code Review Assignment"
            echo ""
            
            while IFS='|' read -r tag path reviewers; do
              if grep -qE "^$path(/|$)" changed_files.txt; then
                echo "### 🏷️ Tag: $tag"
                echo "**Path:** \`$path\`  "
                echo -n "**Reviewers:** "
                
                processed=()
                for reviewer in $reviewers; do
                  # 统一标准化比较
                  normalized=$(echo "$reviewer" | awk '{print tolower($0)}')
                  
                  if grep -qFx "$normalized" global_mentions.txt || [[ -n "${new_mentions[$normalized]}" ]]; then
                    processed+=("${reviewer#@}")
                  else
                    processed+=("$reviewer")
                    new_mentions[$normalized]=1
                    echo "$normalized" >> mentioned_users.txt
                  fi
                done
                
                echo "$(IFS=', '; echo "${processed[*]}")  "
                
                echo "<details>"
                echo "<summary><b>Changed Files</b> (Click to expand)</summary>"
                echo ""
                grep -E "^$path(/|$)" changed_files.txt | sed 's/^/- /'
                echo ""
                echo "</details>"
                echo ""
              fi
            done < tag_data.csv

            if [ -s "review_status.md" ]; then
              cat review_status.md
            else
              echo "---"
              echo "### ❗ Review status data missing"
            fi

            echo "---"
            echo "### 📝 Review Instructions"
            echo ""
            echo "1. **维护者可以通过单击此处来刷新审查状态:** [🔄 刷新状态](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/rerun)"
            echo "   **Maintainers can refresh the review status by clicking here:** [🔄 Refresh Status](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/rerun)"
            echo ""
            echo "2. **确认审核通过后评论 \`LGTM/lgtm\`**"
            echo "   **Comment \`LGTM/lgtm\` after confirming approval**"
            echo ""
            echo "3. **PR合并前需至少一位维护者确认**"
            echo "   **PR must be confirmed by at least one maintainer before merging**"
            echo ""
            echo "> ℹ️ **刷新CI状态操作需要具备仓库写入权限。**"
            echo "> ℹ️ **Refresh CI status operation requires repository Write permission.**"
          } > review_data.md

          # 更新全局记录
          awk '!seen[tolower($0)]++' mentioned_users.txt | sort -u > tmp && mv tmp mentioned_users.txt

      - name: Post/Update comment
        id: post_comment
        run: |
          current_body=$(cat review_data.md)
          existing_comments=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments")
          
          comment_id=$(echo "$existing_comments" | jq -r '[.[] | select(.user.login == "github-actions[bot]")][0].id // empty')
          
          if [ -n "$comment_id" ]; then
            existing_body=$(echo "$existing_comments" | jq -r ".[] | select(.id == $comment_id) | .body")
            if [ "$existing_body" != "$current_body" ]; then
              curl -s -X PATCH \
                -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                -d "$(jq -n --arg body "$current_body" '{body: $body}')" \
                "https://api.github.com/repos/${{ github.repository }}/issues/comments/$comment_id"
            fi
          else
            curl -s -X POST \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -d "$(jq -n --arg body "$current_body" '{body: $body}')" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
          fi

      - name: Update mention cache
        uses: actions/cache/save@v3
        if: always()
        with:
          path: mentioned_users.txt
          key: pr-${{ github.event.pull_request.number }}-mentions
