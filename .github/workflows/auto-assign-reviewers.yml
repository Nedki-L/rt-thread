name: Auto Reviewers Assignment

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  assign-reviewers:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get changed files
        id: changed_files_step
        run: |
          changed_files=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" | \
            jq -r '.[].filename')
          
          echo "$changed_files" | grep -v '^MAINTAINER$' > changed_files.txt
          echo "🔄 Changed files:"
          cat changed_files.txt | sed 's/^/  - /'

      - name: Parse MAINTAINER file
        id: parse_maintainer_step
        run: |
          awk '
            /^tag:/ { tag=$2 }
            /^path:/ { path=$2 }
            /^owners:/ {
              split($0, parts, /[()]/)
              github_ids = ""
              for (i=2; i<=length(parts); i+=2) {
                github_ids = github_ids "@" parts[i] " "
              }
              print tag "|" path "|" github_ids
            }
          ' MAINTAINER > tag_data.csv
          echo "✅ Parsed data:"
          column -t -s "|" tag_data.csv | sed 's/^/  /'

      - name: Generate review data
        id: generate_review_step
        run: |
          changed_files=$(cat changed_files.txt)
          rm -f review_data.md
          
          # 生成评论头部（严格控制空行）
          echo "## 📌 Code Ownership Review Request" > review_data.md
          
          while IFS='|' read -r tag path reviewers; do
            echo "🔍 Processing tag: $tag"
            matched_files=$(grep -E "^$path(/|$)" changed_files.txt || true)
            
            if [[ -n "$matched_files" ]]; then
              echo "  ✅ Matched files:"
              echo "$matched_files" | sed 's/^/    - /'
              
              # 生成带间距的Markdown块
              {
                echo ""
                echo "### 🏷️ Tag: $tag"
                echo "**Path:** \`$path\`  "
                echo "**Reviewers:** $reviewers  "
                echo "<details>"
                echo "<summary><b>Changed Files</b> (Click to expand)</summary>"
                echo ""
                echo "$matched_files" | sed 's/^/- /'
                echo ""
                echo "</details>"
              } >> review_data.md
            fi
          done < tag_data.csv
          
          # 强制设置环境变量（关键修复）
          if [[ -s review_data.md ]]; then
            echo "REVIEW_DATA_EXISTS=true" >> $GITHUB_ENV
            echo "📝 Generated review data:"
            cat review_data.md
          else
            echo "REVIEW_DATA_EXISTS=false" >> $GITHUB_ENV
            echo "⚠️ No matching tags found"
          fi
          
          # 调试输出当前目录结构
          echo "::group::Directory Structure"
          pwd
          ls -al
          echo "::endgroup::"

      - name: Delete old comments
        if: env.REVIEW_DATA_EXISTS == 'true'
        run: |
          echo "::group::Deleting previous comments..."
          comment_ids=$(
            curl -s \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments" |
            jq -r '.[] | select(.user.login == "github-actions[bot]") | .id'
          )
          for id in $comment_ids; do
            echo "Deleting comment $id"
            curl -s -X DELETE \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/comments/$id"
          done
          echo "::endgroup::"

      - name: Post structured comment
        if: env.REVIEW_DATA_EXISTS == 'true'
        run: |
          # 动态生成去重审核者列表（保留原始顺序）
          reviewers_list=$(awk -F'|' '{print $3}' tag_data.csv | tr ' ' '\n' | awk '!seen[$0]++' | xargs)
          
          # 构建评论内容
          comment_header="## 📌 Code Ownership Review Request\n\n"
          comment_body=$(cat review_data.md)
          progress_section="\n\n---\n### 📝 Review Progress\n"
          progress_section+="Click checkboxes to mark completion:\n"
          
          for reviewer in $reviewers_list; do
            progress_section+="- [ ] ${reviewer}\n"
          done
          progress_section+="\n*Note: Checkboxes are interactive in GitHub comments.*"
          
          full_comment="${comment_header}${comment_body}${progress_section}"
          
          # 使用jq安全生成JSON（自动处理转义）
          comment_json=$(jq -n --arg body "$full_comment" '{body: $body}')
          
          # 调试输出
          echo "::group::Generated JSON Preview"
          echo "$comment_json"
          echo "::endgroup::"
          
          # 发送请求
          response=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -X POST \
            -d "$comment_json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments")
          
          # 处理响应
          if echo "$response" | grep -q '"message"'; then
            echo "❌ Error: $(echo "$response" | jq .message)"
            exit 1
          else
            echo "✅ Comment posted successfully!"
            echo "View comment at: $(echo "$response" | jq .html_url)"
          fi
