name: Auto Reviewers Assignment

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  assign-reviewers:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get changed files in the PR
        id: changed_files
        run: |
          echo "Getting changed files..."
          changed_files=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" | \
            jq -r '.[].filename')
          filtered_files=$(echo "$changed_files" | grep -v 'MAINTAINER')
          echo "$filtered_files" > changed_files.txt
          echo "Changed files:"
          cat changed_files.txt

      - name: Save MAINTAINER file to a temporary file
        id: save_maintainer
        run: |
          echo "Saving MAINTAINER file..."
          cat MAINTAINER > maintainer_content.txt

      - name: Delete previous GitHub Action comments
        id: delete_previous_comments
        run: |
          comments=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments")
          action_bot_comments=$(echo "$comments" | jq -r '.[] | select(.user.login == "github-actions[bot]") | .id')
          for comment_id in $action_bot_comments; do
            echo "Deleting comment with ID: $comment_id"
            curl -s \
              -X DELETE \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/comments/$comment_id"
          done

      - name: Read MAINTAINER file and generate review comments
        id: generate_comments
        run: |
          maintainer_content=$(cat maintainer_content.txt)
          changed_files=$(cat changed_files.txt)
          comment_msg=""
          seen_tags=""

          # 逐行解析 MAINTAINER 文件
          while IFS= read -r line; do
            if [[ "$line" =~ ^tag:[[:space:]]+(.*) ]]; then
              tag="${BASH_REMATCH[1]}"
              echo "Processing tag: $tag"

              # 读取 path 行
              read -r path_line
              if [[ "$path_line" =~ ^path:[[:space:]]+(.*) ]]; then
                paths="${BASH_REMATCH[1]}"
              else
                echo "Error: Invalid path line for tag $tag"
                continue
              fi

              # 读取 owners 行
              read -r owners_line
              if [[ "$owners_line" =~ ^owners:[[:space:]]+(.*) ]]; then
                owners="${BASH_REMATCH[1]}"
              else
                echo "Error: Invalid owners line for tag $tag"
                continue
              fi

              # 检查是否已处理该 tag
              if [[ " $seen_tags " =~ " $tag " ]]; then
                echo "Tag $tag already processed. Skipping."
                continue
              fi

              # 检查是否有文件匹配路径
              file_matched=false
              for file in $changed_files; do
                if [[ "$file" == $paths* ]]; then
                  file_matched=true
                  break
                fi
              done

              if [ "$file_matched" = true ]; then
                # 解析 owners 列表
                reviewers=""
                IFS=',' read -ra owner_entries <<< "$owners"
                for entry in "${owner_entries[@]}"; do
                  entry_clean=$(echo "$entry" | xargs)  # 去除前后空格
                  github_user=$(echo "$entry_clean" | sed -E 's/^([a-zA-Z0-9_-]+)\(.*/\1/')
                  reviewers+="@$github_user "
                done

                # 去重
                reviewers=$(echo "$reviewers" | tr ' ' '\n' | sort -u | tr '\n' ' ' | xargs)

                timestamp=$(date +'%Y-%m-%d %H:%M:%S')
                comment_msg+="Timestamp: $timestamp\nReviewer: $reviewers\nTag: $tag\nPlease review changes related to this tag.\n\n"
                seen_tags="$seen_tags $tag"
              fi
            fi
          done <<< "$maintainer_content"

          echo "comment_msg=$comment_msg" >> $GITHUB_ENV

      - name: Post comment on the PR
        if: env.comment_msg != ''
        run: |
          comment="${{ env.comment_msg }}"
          curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -X POST \
            -d "{\"body\": \"$comment\"}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
