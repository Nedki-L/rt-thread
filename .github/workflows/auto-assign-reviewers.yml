name: Auto Reviewer Based on MAINTAINER.json

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  auto-comment:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get PR modified files
        id: pr_files
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Fetching modified files for the PR..."
          PR_FILES=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
          "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" \
          | jq -r '.[].filename')
          echo "Modified files: $PR_FILES"
          echo "PR_FILES=$PR_FILES" >> $GITHUB_ENV

      - name: Load MAINTAINER.json and Generate Comment
        id: generate_comment
        run: |
          echo "Loading MAINTAINER.json and generating comment..."
          if [ ! -f "./MAINTAINER.json" ]; then
            echo "Error: MAINTAINER.json not found!"
            exit 1
          fi

          # 读取 MAINTAINER.json
          MAINTAINERS=$(cat MAINTAINER.json | jq -c '.')

          # 遍历 PR 修改的文件并匹配维护者
          COMMENT=""
          NEW_OWNERS=()
          for FILE in $(echo $PR_FILES); do
            MATCHES=$(echo "$MAINTAINERS" | jq -c --arg FILE "$FILE" '[.[] | select(.path | startswith($FILE))]')
            if [ "$MATCHES" != "[]" ]; then
              TAG=$(echo "$MATCHES" | jq -r '.[0].tag')
              OWNERS=$(echo "$MATCHES" | jq -r '.[0].owner' | tr ',' '\n')

              # 生成评论内容
              REVIEWERS_LINE="Reviewer: $(echo "$OWNERS" | xargs -n1 | sed 's/^/@/' | tr '\n' ' ')"
              TAG_LINE="Tag: $TAG"
              REVIEW_FOCUS="Review Focus:
              The $TAG tag is ready for your review! Please pay close attention to the following aspects:
              - Logical Flow: Ensure the workflow follows a logical sequence.
              - Optimizations: Identify any opportunities to streamline the process.
              - Test Coverage: Check if the workflow addresses all possible edge cases."

              COMMENT+="$REVIEWERS_LINE\n$TAG_LINE\n$REVIEW_FOCUS\n\n"

              # 添加到新的维护者列表
              for OWNER in $OWNERS; do
                if [[ ! " ${NEW_OWNERS[@]} " =~ " $OWNER " ]]; then
                  NEW_OWNERS+=("$OWNER")
                fi
              done
            fi
          done

          if [ -z "$COMMENT" ]; then
            echo "No comment generated. Exiting."
            exit 0
          fi

          echo "Generated comment: $COMMENT"
          echo "COMMENT_BODY=$COMMENT" >> $GITHUB_ENV

      - name: Post comment to PR
        env:
          COMMENT_BODY: ${{ env.COMMENT_BODY }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          PR_NUMBER=${{ github.event.pull_request.number }}

          # 获取现有评论
          EXISTING_COMMENT_ID=$(curl -s -H "Authorization: Bearer $GITHUB_TOKEN" \
          "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments" \
          | jq -r '.[] | select(.body | contains("CI Reviewer")) | .id')

          if [ -z "$EXISTING_COMMENT_ID" ]; then
            # 如果没有找到现有评论，则添加新评论
            echo "Posting new comment..."
            curl -X POST -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"body\": \"$COMMENT_BODY\"}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${PR_NUMBER}/comments"
          else
            # 如果找到现有评论，则更新评论
            echo "Updating existing comment with ID: $EXISTING_COMMENT_ID"
            curl -X PATCH -H "Authorization: Bearer $GITHUB_TOKEN" \
            -H "Content-Type: application/json" \
            -d "{\"body\": \"$COMMENT_BODY\"}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/comments/${EXISTING_COMMENT_ID}"
          fi
