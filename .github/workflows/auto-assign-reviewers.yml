#
# Copyright (c) 2006-2024, RT-Thread Development Team
#
# SPDX-License-Identifier: Apache-2.0
#
# Change Logs:
# Date           Author       Notes
# 2024-08-26     kurisaW      Full interactive solution
#

name: Auto Reviewers Assignment

on:
  pull_request:
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]

jobs:
  assign-reviewers:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get changed files
        id: changed_files
        run: |
          changed_files=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" | \
            jq -r '.[].filename')
          
          echo "$changed_files" | grep -v '^MAINTAINER$' > changed_files.txt
          echo "🔄 Changed files:"
          cat changed_files.txt | sed 's/^/  - /'

      - name: Parse MAINTAINER file
        id: parse_maintainer
        run: |
          awk '
            /^tag:/ { tag=$2 }
            /^path:/ { path=$2 }
            /^owners:/ {
              split($0, parts, /[()]/)
              github_ids = ""
              for (i=2; i<=length(parts); i+=2) {
                github_ids = github_ids "@" parts[i] " "
              }
              print tag "|" path "|" github_ids
            }
          ' MAINTAINER > tag_data.csv
          echo "✅ Parsed data:"
          column -t -s "|" tag_data.csv | sed 's/^/  /'

      - name: Generate review data
        id: generate_review
        run: |
          changed_files=$(cat changed_files.txt)
          rm -f review_data.md triggered_reviewers.txt

          # 生成触发审核者列表
          while IFS='|' read -r tag path reviewers; do
            if grep -qE "^$path(/|$)" changed_files.txt; then
              echo "$reviewers" | tr ' ' '\n' >> triggered_reviewers.txt
            fi
          done < tag_data.csv

          # 生成去重审核者列表
          awk 'NF && !seen[$0]++' triggered_reviewers.txt > unique_reviewers.txt

          # 生成评论主体
          {
            echo "## 📌 Code Ownership Review Request"
            echo ""
            # 生成标签块
            while IFS='|' read -r tag path reviewers; do
              if grep -qE "^$path(/|$)" changed_files.txt; then
                echo "### 🏷️ Tag: $tag"
                echo "**Path:** \`$path\`  "
                echo "**Reviewers:** $reviewers  "
                echo "<details>"
                echo "<summary><b>Changed Files</b> (Click to expand)</summary>"
                echo ""
                grep -E "^$path(/|$)" changed_files.txt | sed 's/^/- /'
                echo ""
                echo "</details>"
                echo ""
              fi
            done < tag_data.csv
            
            # 生成交互模块
            echo "### 📝 Review Progress"
            echo "维护者请执行以下操作："
            echo "1. 评论 \`/review-done @你的用户名\` 标记审核完成"
            echo "2. 点击下方链接刷新状态"
            echo ""
            echo "<details>"
            echo "<summary><b>当前审核状态</b>（最后更新：未刷新）</summary>"
            echo ""
            echo "### 实时状态"
            cat unique_reviewers.txt | while read -r reviewer; do
              echo "- **${reviewer}**: ⌛ 等待审核"
            done
            echo ""
            echo "</details>"
            echo ""
            echo "[🔄 立即刷新状态](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          } > review_data.md

      - name: Post/Update comment
        id: post_comment
        run: |
          # 查找已有评论
          existing_comment=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments" | \
            jq -r '.[] | select(.user.login == "github-actions[bot]") | {id: .id, body: .body} | @base64')
          
          # 创建或更新评论
          if [[ -n "$existing_comment" ]]; then
            comment_id=$(echo "$existing_comment" | head -1 | base64 -d | jq -r .id)
            echo "Updating existing comment $comment_id"
            response=$(curl -s -X PATCH \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -d "$(jq -n --arg body "$(cat review_data.md)" '{body: $body}')" \
              "https://api.github.com/repos/${{ github.repository }}/issues/comments/$comment_id")
          else
            echo "Creating new comment"
            response=$(curl -s -X POST \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -d "$(jq -n --arg body "$(cat review_data.md)" '{body: $body}')" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments")
            comment_id=$(echo "$response" | jq -r .id)
          fi
          echo "comment_id=$comment_id" >> $GITHUB_ENV

      - name: Process review commands
        if: github.event_name == 'issue_comment'
        run: |
          comment_body="${{ github.event.comment.body }}"
          case "$comment_body" in
            */review-done*)
              reviewer=$(echo "$comment_body" | sed -nE 's/.*\/review-done +@([a-zA-Z0-9_-]+).*/\1/p')
              timestamp=$(date -u +"%Y-%m-%d %H:%M UTC")
              echo "Marking $reviewer as reviewed at $timestamp"
              echo "$timestamp" >> review_status.txt
              echo "$reviewer" >> review_status.txt
              ;;
          esac

      - name: Update status display
        run: |
          # 加载审核状态
          declare -A status_map
          if [[ -f "review_status.txt" ]]; then
            while read -r line; do
              if [[ "$line" =~ ^[0-9]{4}- ]]; then
                current_time="$line"
              else
                status_map["$line"]="$current_time"
              fi
            done < review_status.txt
          fi

          # 生成状态报告
          status_report=$'### 实时状态\n\n'
          while read -r reviewer; do
            user_name="${reviewer//@/}"
            if [[ -n "${status_map[$user_name]}" ]]; then
              status_report+="- ✅ **${reviewer}** 审核于 ${status_map[$user_name]}\n"
            else
              status_report+="- ⌛ **${reviewer}** 等待审核\n"
            fi
          done < unique_reviewers.txt

          # 更新评论内容
          current_body=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/comments/${{ env.comment_id }}" | jq -r .body)
          
          # 使用awk精准替换状态块
          updated_body=$(echo "$current_body" | awk -v new_status="$status_report" '
            /<summary><b>当前审核状态/,/<\/details>/ {
              if ($0 ~ /<details>/) print
              if ($0 ~ /<summary>/) sub(/未刷新/, strftime("%Y-%m-%d %H:%M UTC"))
              if ($0 ~ /### 实时状态/) {
                print new_status
                while (getline > 0 && !/<\/details>/) {}
                next
              }
            }
            { print }
          ')

          # 提交更新
          curl -s -X PATCH \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -d "$(jq -n --arg body "$updated_body" '{body: $body}')" \
            "https://api.github.com/repos/${{ github.repository }}/issues/comments/${{ env.comment_id }}"
