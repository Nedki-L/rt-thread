name: Auto Reviewers Assignment

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  assign-reviewers:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get changed files
        id: changed_files_step
        run: |
          changed_files=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" | \
            jq -r '.[].filename')
          
          echo "$changed_files" | grep -v '^MAINTAINER$' > changed_files.txt
          echo "🔄 Changed files:"
          cat changed_files.txt | sed 's/^/  - /'

      - name: Parse MAINTAINER file
        id: parse_maintainer_step
        run: |
          awk '
            /^tag:/ { tag=$2 }
            /^path:/ { path=$2 }
            /^owners:/ {
              split($0, parts, /[()]/)
              github_ids = ""
              for (i=2; i<=length(parts); i+=2) {
                github_ids = github_ids "@" parts[i] " "
              }
              print tag "|" path "|" github_ids
            }
          ' MAINTAINER > tag_data.csv
          echo "✅ Parsed data:"
          column -t -s "|" tag_data.csv | sed 's/^/  /'

      - name: Generate review data
        id: generate_review_step
        run: |
          changed_files=$(cat changed_files.txt)
          rm -f review_data.md triggered_reviewers.txt
          
          # 初始化评论内容
          echo "## 📌 Code Ownership Review Request" > review_data.md
          echo "" >> review_data.md
          
          # 生成标签块并记录实际触发审核者
          while IFS='|' read -r tag path reviewers; do
            matched_files=$(grep -E "^$path(/|$)" changed_files.txt || true)
            if [[ -n "$matched_files" ]]; then
              # 写入标签块
              {
                echo "### 🏷️ Tag: $tag"
                echo "**Path:** \`$path\`  "
                echo "**Reviewers:** $reviewers  "
                echo "<details>"
                echo "<summary><b>Changed Files</b> (Click to expand)</summary>"
                echo ""
                echo "$matched_files" | sed 's/^/- /'
                echo ""
                echo "</details>"
                echo ""
              } >> review_data.md
              
              # 记录当前标签的审核者（关键修复）
              echo "$reviewers" | tr ' ' '\n' >> triggered_reviewers.txt
            fi
          done < tag_data.csv
      
          # 动态生成审核者列表（仅包含实际触发人员）
          if [[ -f triggered_reviewers.txt ]]; then
            awk '!seen[$0]++' triggered_reviewers.txt > unique_reviewers.txt  # 去重并保留顺序
            
            # 添加审核进度模块
            if [[ -s unique_reviewers.txt ]]; then
              {
                echo "---"
                echo "### 📝 Review Progress"
                echo "Click checkboxes to mark completion:"
                while read -r reviewer; do
                  [[ -n "$reviewer" ]] && echo "- [ ] $reviewer"
                done < unique_reviewers.txt
                echo ""
                echo "*Note: Checkboxes are interactive in GitHub comments.*"
              } >> review_data.md
            fi
          fi
      
          # 设置环境变量
          if [[ -s review_data.md ]]; then
            echo "REVIEW_DATA_EXISTS=true" >> $GITHUB_ENV
            echo "📝 Generated review data:"
            cat review_data.md
          else
            echo "REVIEW_DATA_EXISTS=false" >> $GITHUB_ENV
          fi
          # 设置环境变量
          if [[ -s review_data.md ]]; then
            echo "REVIEW_DATA_EXISTS=true" >> $GITHUB_ENV
            echo "📝 Generated review data:"
            cat review_data.md
          else
            echo "REVIEW_DATA_EXISTS=false" >> $GITHUB_ENV
          fi

      - name: Delete old comments
        if: env.REVIEW_DATA_EXISTS == 'true'
        run: |
          echo "::group::Cleaning up previous comments..."
          
          # 获取所有评论（处理分页）
          page=1
          all_comments=""
          while true; do
            comments=$(curl -s \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments?per_page=100&page=$page")
            
            # 判断是否还有数据
            if [[ $(echo "$comments" | jq '. | length') -eq 0 ]]; then
              break
            fi
            
            all_comments+=$(echo "$comments" | jq -c '.[]')
            ((page++))
          done

          # 提取需要删除的评论ID
          comment_ids=$(echo "$all_comments" | jq -r 'select(.user.login == "github-actions[bot]") | .id')
          
          echo "Found ${#comment_ids[@]} bot comments to delete"
          
          # 删除所有历史评论
          for id in $comment_ids; do
            echo "Deleting comment $id"
            curl -s -X DELETE \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/comments/$id"
          done
          echo "::endgroup::"

      - name: Post structured comment
        if: env.REVIEW_DATA_EXISTS == 'true'
        run: |
          full_comment=$(cat review_data.md)
          
          # 安全生成JSON（自动处理换行符）
          comment_json=$(jq -n --arg body "$full_comment" '{body: $body}')
          
          # 发送请求
          response=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -X POST \
            -d "$comment_json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments")
          
          echo "✅ Comment posted at: $(echo "$response" | jq .html_url)"
