name: Assign Reviewers Based on Maintainer File

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  assign-reviewers:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout the code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: 3.x

      - name: Install dependencies
        run: pip install PyYAML requests

      - name: Write Python script for maintainer parsing
        run: |
          echo '''
          import os
          import requests
          from datetime import datetime
          
          # Load the MAINTAINER file
          MAINTAINER_FILE = "MAINTAINER"
          
          if not os.path.exists(MAINTAINER_FILE):
              raise FileNotFoundError(f"{MAINTAINER_FILE} not found in the repository.")
          
          with open(MAINTAINER_FILE, "r") as f:
              maintainer_data = f.read()

          # Parse the MAINTAINER file
          def parse_maintainer(content):
              tags = []
              for section in content.strip().split("\\n\\n"):
                  lines = section.strip().split("\\n")
                  tag = lines[0].split(":")[1].strip()
                  path = lines[1].split(":")[1].strip()
                  owners_raw = lines[2].split(":")[1].strip()
                  owners = [owner.split("(")[0].strip() for owner in owners_raw.split(",")]
                  tags.append({"tag": tag, "path": path, "owners": owners})
              return tags

          maintainer_tags = parse_maintainer(maintainer_data)

          # Get the PR files using GitHub API
          repo = os.getenv("GITHUB_REPOSITORY")
          pr_number = os.getenv("GITHUB_EVENT_PULL_REQUEST_NUMBER")
          api_url = f"https://api.github.com/repos/{repo}/pulls/{pr_number}/files"
          headers = {"Authorization": f"Bearer {os.getenv('GITHUB_TOKEN')}"}

          response = requests.get(api_url, headers=headers)
          if response.status_code != 200:
              raise Exception(f"Failed to fetch PR files: {response.status_code} - {response.text}")
          
          pr_files = response.json()

          # Extract the modified file paths
          modified_files = [file["filename"] for file in pr_files]

          # Match files to tags and reviewers
          triggered_tags = {}
          for file in modified_files:
              for tag_info in maintainer_tags:
                  path = tag_info["path"]
                  if file.startswith(path):  # Match file path recursively
                      tag = tag_info["tag"]
                      if tag not in triggered_tags:
                          triggered_tags[tag] = {"paths": set(), "owners": set(tag_info["owners"])}
                      triggered_tags[tag]["paths"].add(file)

          # Generate the comment content
          timestamp = datetime.utcnow().isoformat()
          comment_lines = []
          for tag, data in triggered_tags.items():
              reviewer_mentions = " ".join([f"@{owner}" for owner in data["owners"]])
              file_list = "\\n".join(data["paths"])
              comment_lines.append(
                  f"Timestamp: {timestamp}\\nReviewer: {reviewer_mentions}\\n\\nTag: {tag}\\nPlease take a review of this tag\\nAffected files:\\n{file_list}\\n"
              )

          comment_body = "\\n---\\n".join(comment_lines)

          # Set the comment body for the next step
          print(f"::set-output name=comment_body::{comment_body}")
          ''' > parse_maintainer.py

      - name: Run Python script to parse maintainers and assign reviewers
        run: python3 parse_maintainer.py

      - name: Install jq (for JSON parsing)
        run: sudo apt-get install -y jq

      - name: Upload Comment to PR
        if: steps.parse-maintainer.outputs.comment_body != ''
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          COMMENT_BODY="${{ steps.parse-maintainer.outputs.comment_body }}"
          PAYLOAD=$(echo '{}' | jq --arg body "$COMMENT_BODY" '.body = $body')
          PR_NUMBER="${{ github.event.pull_request.number }}"
          curl -s -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Content-Type: application/json" \
              -d "$PAYLOAD" \
              "https://api.github.com/repos/${{ github.repository }}/issues/$PR_NUMBER/comments"

      - name: Save Comment Locally
        if: steps.parse-maintainer.outputs.comment_body != ''
        run: echo "${{ steps.parse-maintainer.outputs.comment_body }}" > comment_msg.txt
