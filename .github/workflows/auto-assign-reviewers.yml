name: Auto Reviewers Assignment

on:
  pull_request:
    types: [opened, synchronize, reopened]
  issue_comment:
    types: [created]

jobs:
  assign-reviewers:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
      contents: read
    outputs:
      comment_id: ${{ steps.post_comment.outputs.comment_id }}
      run_id: ${{ github.run_id }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          name: reviewers-${{ github.run_id }}

      - name: Get changed files
        id: changed_files
        run: |
          changed_files=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" | \
            jq -r '.[].filename')
          
          echo "$changed_files" | grep -v '^MAINTAINER$' > changed_files.txt
          echo "🔄 Changed files:"
          cat changed_files.txt | sed 's/^/  - /'

      - name: Parse MAINTAINER file
        id: parse_maintainer
        run: |
          awk '
            /^tag:/ { tag=$2 }
            /^path:/ { path=$2 }
            /^owners:/ {
              split($0, parts, /[()]/)
              github_ids = ""
              for (i=2; i<=length(parts); i+=2) {
                github_ids = github_ids "@" parts[i] " "
              }
              print tag "|" path "|" github_ids
            }
          ' MAINTAINER > tag_data.csv

      - name: Generate review data
        id: generate_review
        run: |
          changed_files=$(cat changed_files.txt)
          rm -f review_data.md triggered_reviewers.txt

          while IFS='|' read -r tag path reviewers; do
            if grep -qE "^$path(/|$)" changed_files.txt; then
              echo "$reviewers" | tr ' ' '\n' >> triggered_reviewers.txt
            fi
          done < tag_data.csv

          awk 'NF && !seen[$0]++' triggered_reviewers.txt > unique_reviewers.txt

          {
            echo "## 📌 Code Ownership Review Request"
            echo ""
            while IFS='|' read -r tag path reviewers; do
              if grep -qE "^$path(/|$)" changed_files.txt; then
                echo "### 🏷️ Tag: $tag"
                echo "**Path:** \`$path\`  "
                echo "**Reviewers:** $reviewers  "
                echo "<details>"
                echo "<summary><b>Changed Files</b> (Click to expand)</summary>"
                echo ""
                grep -E "^$path(/|$)" changed_files.txt | sed 's/^/- /'
                echo ""
                echo "</details>"
                echo ""
              fi
            done < tag_data.csv
            
            echo "### 📝 Review Progress"
            echo "维护者请执行以下操作："
            echo "1. 评论 \`LGTM\` 标记审核完成"
            echo "2. 点击下方链接刷新状态"
            echo ""
            echo "<details>"
            echo "<summary><b>当前审核状态</b>（最后更新：未刷新）</summary>"
            echo ""
            echo "### 实时状态"
            cat unique_reviewers.txt | while read -r reviewer; do
              echo "- **${reviewer}**: ⌛ 等待审核"
            done
            echo ""
            echo "</details>"
            echo ""
            echo "[🔄 立即刷新状态](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})"
          } > review_data.md

      - name: Upload reviewers list
        uses: actions/upload-artifact@v4
        with:
          name: reviewers-${{ github.run_id }}
          path: unique_reviewers.txt

      - name: Post/Update comment
        id: post_comment
        run: |
          existing_comment=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments" | \
            jq -r '.[] | select(.user.login == "github-actions[bot]") | {id: .id, body: .body} | @base64')
          
          if [[ -n "$existing_comment" ]]; then
            comment_id=$(echo "$existing_comment" | head -1 | base64 -d | jq -r .id)
            echo "Updating existing comment $comment_id"
            response=$(curl -s -X PATCH \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -d "$(jq -n --arg body "$(cat review_data.md)" '{body: $body}')" \
              "https://api.github.com/repos/${{ github.repository }}/issues/comments/$comment_id")
          else
            echo "Creating new comment"
            response=$(curl -s -X POST \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -d "$(jq -n --arg body "$(cat review_data.md)" '{body: $body}')" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments")
            comment_id=$(echo "$response" | jq -r .id)
          fi
          echo "comment_id=$comment_id" >> $GITHUB_OUTPUT

  process-approval:
    runs-on: ubuntu-latest
    needs: assign-reviewers
    permissions:
      issues: write
      pull-requests: write
      contents: read
    if: |
      github.event_name == 'issue_comment' &&
      contains(github.event.comment.body, 'LGTM')
    steps:
      - name: Download reviewers list
        uses: actions/download-artifact@v4
        with:
          name: reviewers-${{ needs.assign-reviewers.outputs.run_id }}
          path: .
          pattern: unique_reviewers.txt
          merge-multiple: true

      - name: Validate maintainer
        id: validate
        run: |
          commenter="${{ github.event.comment.user.login }}"
          
          if grep -qx "@$commenter" unique_reviewers.txt; then
            echo "VALID_REVIEWER=true" >> $GITHUB_ENV
            echo "REVIEWER=@$commenter" >> $GITHUB_ENV
          else
            echo "::notice::[安全拦截] 用户 @$commenter 无审核权限"
            exit 0
          fi

      - name: Update review status
        if: env.VALID_REVIEWER == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          timestamp=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          comment_body=$(curl -s \
            "https://api.github.com/repos/${{ github.repository }}/issues/comments/${{ needs.assign-reviewers.outputs.comment_id }}" | \
            jq -r .body)

          updated_body=$(jq -n --arg body "$comment_body" --arg reviewer "$REVIEWER" --arg ts "$timestamp" '
            ($body | split("<details>")) as $parts |
            $parts[0] | 
            gsub("最后更新：.*"; "最后更新：\($ts)") |
            . + "<details>" + ($parts[1] | 
              split("### 实时状态") |
              .[0] + 
              "### 实时状态\n\n" + 
              (.[1] | 
                gsub("- ⌛ \\*\\*\($reviewer)\\*\\* 等待审核"; "- ✅ **\($reviewer)** 审核于 \($ts)") |
                gsub("- ✅ \\*\\*\($reviewer)\\*\\* 审核于 .*"; "- ✅ **\($reviewer)** 审核于 \($ts)")
              )
            )
          ')

          curl -s -X PATCH \
            -H "Authorization: Bearer $GITHUB_TOKEN" \
            -d "$(jq -n --arg body "$updated_body" '{body: $body}')" \
            "https://api.github.com/repos/${{ github.repository }}/issues/comments/${{ needs.assign-reviewers.outputs.comment_id }}"

          echo "✔️ 审核状态已更新：$REVIEWER 于 $timestamp"
