name: Auto Reviewers Assignment

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  assign-reviewers:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get changed files
        id: changed_files
        run: |
          # Ëé∑Âèñ‰øÆÊîπÊñá‰ª∂ÂàóË°®ÔºàÂ∏¶Ë∞ÉËØïÊó•ÂøóÔºâ
          echo "::group::Fetching changed files..."
          changed_files=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" | \
            jq -r '.[].filename')
          echo "Raw changed files:"
          echo "$changed_files"
          
          filtered_files=$(echo "$changed_files" | grep -v '^MAINTAINER$')
          echo "$filtered_files" > changed_files.txt
          echo "::endgroup::"
          echo "üîÑ Filtered changed files:"
          cat changed_files.txt | sed 's/^/  - /'

      - name: Parse MAINTAINER file
        id: parse_maintainer
        run: |
          echo "::group::Parsing MAINTAINER file..."
          # ÁîüÊàêÁªìÊûÑÂåñÊï∞ÊçÆÔºàÂ∏¶‰∏•Ê†ºÊ†ºÂºèÊ£ÄÊü•Ôºâ
          {
            echo "tag|path|owners";
            awk '/^tag:/ {tag=$2} /^path:/ {path=$2} /^owners:/ {print tag "|" path "|" $0}' MAINTAINER | 
            sed -E 's/tag: (.*)/\1/; s/path: (.*)/\1/; s/owners: //';
          } > tag_data.csv
          
          echo "Generated tag_data.csv:"
          column -t -s "|" tag_data.csv | sed 's/^/  /'
          echo "::endgroup::"

      - name: Match tags and generate review list
        id: match_tags
        run: |
          echo "::group::Matching tags process..."
          changed_files=$(cat changed_files.txt)
          rm -f review_data.md
          
          # ÈÅçÂéÜÊØè‰∏™Ê†áÁ≠æÈÖçÁΩÆ
          while IFS='|' read -r tag path owners; do
            [[ "$tag" == "tag" ]] && continue  # Ë∑≥ËøáÊ†áÈ¢òË°å
            
            echo "Processing tag: [$tag], path: [$path]"
            
            # ÊèêÂèñGitHub IDÔºà‰∏•Ê†ºÊ®°ÂºèÔºâ
            github_ids=$(
              echo "$owners" | 
              sed -E 's/([^,()]+)\(([^)]+)\)/\2/g' |  # ÊèêÂèñÊã¨Âè∑ÂÜÖÂÆπ
              tr ',' '\n' | 
              awk '{$1=$1;print}' |                   # Ê∏ÖÁêÜÁ©∫Ê†º
              sort -u | 
              sed 's/^/@/g' | 
              tr '\n' ' '
            )
            
            # Ê£ÄÊü•Êñá‰ª∂Ë∑ØÂæÑÂåπÈÖçÔºàÊîØÊåÅÂ≠êÁõÆÂΩïÔºâ
            matched_files=$(
              grep -E "^$path(/|$)" changed_files.txt || true
            )
            
            if [[ -n "$matched_files" ]]; then
              echo "‚úÖ Matched files for tag [$tag]:"
              echo "$matched_files" | sed 's/^/  - /'
              
              # ÁîüÊàêMarkdownÂÜÖÂÆπÂùó
              {
                echo "### üè∑Ô∏è Tag: $tag";
                echo "**Path:** \`$path\`";
                echo "**Reviewers:** $github_ids";
                echo "**Changed Files:**";
                echo "$matched_files" | sed 's/^/  - /';
                echo "";
              } >> review_data.md
            else
              echo "‚ùå No files matched for tag [$tag]"
            fi
          done < tag_data.csv
          
          # Á°ÆËÆ§Êï∞ÊçÆÁîüÊàê
          if [[ -f review_data.md ]]; then
            echo "REVIEW_DATA_EXISTS=true" >> $GITHUB_ENV
            echo "Generated review_data.md:"
            cat review_data.md
          else
            echo "REVIEW_DATA_EXISTS=false" >> $GITHUB_ENV
            echo "‚ö†Ô∏è No matching tags found"
          fi
          echo "::endgroup::"

      - name: Delete old comments
        if: env.REVIEW_DATA_EXISTS == 'true'
        run: |
          echo "::group::Deleting previous comments..."
          comment_ids=$(
            curl -s \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments" |
            jq -r '.[] | select(.user.login == "github-actions[bot]") | .id'
          )
          
          for id in $comment_ids; do
            echo "Deleting comment $id"
            curl -s -X DELETE \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/repos/${{ github.repository }}/issues/comments/$id"
          done
          echo "::endgroup::"

      - name: Post structured comment
        if: env.REVIEW_DATA_EXISTS == 'true'
        run: |
          echo "::group::Posting new comment..."
          comment_header="## üìå Code Ownership Review Request\n\n"
          comment_body=$(cat review_data.md)
          full_comment="${comment_header}${comment_body}"
          
          # ÁîüÊàêË∞ÉËØïÈ¢ÑËßà
          echo "Preview of comment content:"
          echo "--------------------------"
          echo -e "$full_comment"
          echo "--------------------------"
          
          # ‰ΩøÁî®JSONÂÆâÂÖ®Ê†ºÂºèÂåñ
          comment_json=$(jq -n --arg body "$full_comment" '{body: $body}')
          
          response=$(
            curl -s \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Content-Type: application/json" \
              -X POST \
              -d "$comment_json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments"
          )
          
          if echo "$response" | grep -q '"message"'; then
            echo "‚ùå Failed to post comment:"
            echo "$response" | jq .
            exit 1
          else
            echo "‚úÖ Comment posted successfully!"
          fi
          echo "::endgroup::"
