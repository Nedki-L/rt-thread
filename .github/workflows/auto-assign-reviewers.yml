#
# Copyright (c) 2006-2024, RT-Thread Development Team
#
# SPDX-License-Identifier: Apache-2.0
#
# Change Logs:
# Date           Author       Notes
# 2024-08-26     kurisaW      Initial version with reaction-based review tracking
#

name: Auto Reviewers Assignment

on:
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  assign-reviewers:
    runs-on: ubuntu-latest
    permissions:
      issues: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get changed files
        id: changed_files_step
        run: |
          changed_files=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}/files" | \
            jq -r '.[].filename')
          
          echo "$changed_files" | grep -v '^MAINTAINER$' > changed_files.txt
          echo "🔄 Changed files:"
          cat changed_files.txt | sed 's/^/  - /'

      - name: Parse MAINTAINER file
        id: parse_maintainer_step
        run: |
          awk '
            /^tag:/ { tag=$2 }
            /^path:/ { path=$2 }
            /^owners:/ {
              split($0, parts, /[()]/)
              github_ids = ""
              for (i=2; i<=length(parts); i+=2) {
                github_ids = github_ids "@" parts[i] " "
              }
              print tag "|" path "|" github_ids
            }
          ' MAINTAINER > tag_data.csv
          echo "✅ Parsed data:"
          column -t -s "|" tag_data.csv | sed 's/^/  /'

      - name: Generate review data
        id: generate_review_step
        run: |
          changed_files=$(cat changed_files.txt)
          rm -f review_data.md triggered_reviewers.txt

          # 生成触发审核者列表
          while IFS='|' read -r tag path reviewers; do
            if grep -qE "^$path(/|$)" changed_files.txt; then
              echo "$reviewers" | tr ' ' '\n' >> triggered_reviewers.txt
            fi
          done < tag_data.csv

          # 生成去重审核者列表（关键修复）
          awk 'NF && !seen[$0]++' triggered_reviewers.txt > unique_reviewers.txt

          # 生成评论内容
          echo "## 📌 Code Ownership Review Request" > review_data.md
          echo "" >> review_data.md
          
          while IFS='|' read -r tag path reviewers; do
            if grep -qE "^$path(/|$)" changed_files.txt; then
              {
                echo "### 🏷️ Tag: $tag"
                echo "**Path:** \`$path\`  "
                echo "**Reviewers:** $reviewers  "
                echo "<details>"
                echo "<summary><b>Changed Files</b> (Click to expand)</summary>"
                grep -E "^$path(/|$)" changed_files.txt | sed 's/^/- /'
                echo "</details>"
                echo ""
              } >> review_data.md
            fi
          done < tag_data.csv

          # 添加审核进度模块
          echo -e "\n### 📝 Review Progress" >> review_data.md
          echo "维护者请通过评论标记审核完成：" >> review_data.md
          echo "1. 在 PR 评论区 @github-actions-bot" >> review_data.md
          echo "2. 发送指令：/review-done @yourname\n" >> review_data.md
          cat unique_reviewers.txt | sed 's/^/- /' >> review_data.md

      - name: Post/Update comment
        id: post_comment
        run: |
          # 获取或创建评论（省略 reactions 权限）
          comment_body=$(cat review_data.md)
          existing_comment=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments" | \
            jq -r '.[] | select(.user.login == "github-actions[bot]") | {id: .id, body: .body}')
          
          if [[ -n "$existing_comment" ]]; then
            comment_id=$(echo "$existing_comment" | jq -r '.id')
            # 更新现有评论
            response=$(curl -s -X PATCH \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -d "$(jq -n --arg body "$comment_body" '{body: $body}')" \
              "https://api.github.com/repos/${{ github.repository }}/issues/comments/$comment_id")
          else
            # 创建新评论
            response=$(curl -s -X POST \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -d "$(jq -n --arg body "$comment_body" '{body: $body}')" \
              "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments")
            comment_id=$(echo "$response" | jq -r .id)
          fi
          echo "comment_id=$comment_id" >> $GITHUB_ENV

      - name: Track review status
        run: |
          # 获取所有相关评论
          comments=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments")
          
          # 构建带格式的状态报告
          status_report=$'\n### 当前审核状态（自动更新于 '
          status_report+=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          status_report+=$'）\n\n'

          while read -r reviewer; do
            if echo "$comments" | grep -q "/review-done ${reviewer}"; then
              status_report+=$'✅ **'"${reviewer}** 已审核\n"
            else
              status_report+=$'⌛ **'"${reviewer}** 等待审核\n"
            fi
          done < unique_reviewers.txt

          # 更新评论内容
          current_body=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/comments/${{ env.comment_id }}" | jq -r .body)
          
          updated_body="${current_body%%### 当前审核状态*}"
          updated_body+="$status_report"
          
          curl -s -X PATCH \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -d "$(jq -n --arg body "$updated_body" '{body: $body}')" \
            "https://api.github.com/repos/${{ github.repository }}/issues/comments/${{ env.comment_id }}"

      - name: Setup reaction trackers
        run: |
          # 为每个审核者添加锚点反应
          while read -r reviewer; do
            # 添加唯一标识反应
            curl -s -X POST \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              -H "Accept: application/vnd.github.squirrel-girl-preview+json" \
              "https://api.github.com/repos/${{ github.repository }}/issues/comments/${{ env.comment_id }}/reactions" \
              -d '{"content":"eyes"}'  # 👀 作为追踪锚点
          done < unique_reviewers.txt

      - name: Update review status
        run: |
          # 获取所有反应数据
          reactions=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.squirrel-girl-preview+json" \
            "https://api.github.com/repos/${{ github.repository }}/issues/comments/${{ env.comment_id }}/reactions")

          # 生成状态报告
          status_report=$'\n### 当前审核状态（自动更新于 '
          status_report+=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          status_report+=$'）\n'

          while read -r reviewer; do
            # 提取有效审核反应
            check_mark=$(echo "$reactions" | jq -r \
              ".[] | select(.user.login == \"${reviewer//@/}\" and .content == \"+1\") | .created_at")

            if [[ -n "$check_mark" ]]; then
              status_report+="✅ **${reviewer}** 已审核（$(date -d "$check_mark" -u +'%m-%d %H:%M') UTC）\n"
            else
              status_report+="⌛ **${reviewer}** 等待审核\n"
            fi
          done < unique_reviewers.txt

          # 更新评论状态
          current_body=$(curl -s \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/issues/comments/${{ env.comment_id }}" | jq -r .body)

          updated_body="${current_body%%### 当前审核状态*}"
          updated_body+="$status_report"

          curl -s -X PATCH \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -d "$(jq -n --arg body "$updated_body" '{body: $body}')" \
            "https://api.github.com/repos/${{ github.repository }}/issues/comments/${{ env.comment_id }}"
